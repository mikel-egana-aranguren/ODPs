<p><b>NAME:</b> Normalisation.</p><p><b>ALSO KNOWN AS:</b> Untangling.</p><p><b>CLASSIFICATION:</b> Good Practice.</p><p><b>MOTIVATION:</b> There are ontologies where a given class can have plenty of superclasses, building a polyhierarchy. If all those subsumption relationships are directly stated by the ontology maintainer, two main problems rise: (i) the ontology becomes very difficult to maintain: whenever a subsumption must be deleted (because a class has changed) or created (because a new class has been created) it has to be done by hand; in a polyhierarchy the process becomes very inefficient and error-prone. (ii) the semantics are implicitly stated, not explicitly: any other ontologist or reasoner only knows that a class is a subclass of its superclasses, without knowing why.</p><p><b>AIM:</b> To untangle a polyhierarchy, coding the subsumption relationships using restrictions rather than class-subclass relationships. The application example for this ODP is adapted from the Cell Type Ontology. In the example, the subsumption relationships that already are in the Cell Type Ontology are inferred by the reasoner instead of hard-coded. The term Neutrophil is used as an example class to show how a class can relate to different modules.</p><p><b>STRUCTURE:</b></p><img src="../img/Normalisation_abstract.png"><p><b>SAMPLE:</b></p><img src="../img/Normalisation_instance.png"><p><b>ELEMENTS:</b> The original classes of the ontology are divided in different axes. The conditions for each subsumption relationship are encoded as restrictions (e.g. [PerformsFunction some Defense]) that will relate the different modules.</p><p><b>IMPLEMENTATION:</b> Identify the modules: group the classes. Create the modules, maintaining only one parent for any given primitive class and making primitive siblings disjoint. Redefine the classes (or define the newly added classes) according to the conditions for belonging to each module. Protege includes a wizard, the restrictions matrix, that helps in the process.</p><p><b>RESULT:</b> The ontology gets untangled and becomes a collection of neat modules. The rest of the semantics are given by restrictions pointing to the modules, and the reasoner maintains the structure, avoding error-prone human maintenance of the polyhierarchy.</p><p><b>REFERENCES</b>: <ul><li>Alan L. Rector. Modularisation of Domain Ontologies Implemented in Description Logics and related formalisms including OWL. K-CAP 2003.</li><li>Alan L. Rector, Chris Wroe, Jeremy Rogers and Angus Roberts. Untangling Taxonomies and Relationships: personal and Practical Problems in Loosely Coupled Development of Large Ontologies. K-CAP 2001.</li><li><a href="http://www.co-ode.org/resources/tutorials/bio/">http://www.co-ode.org/resources/tutorials/bio/</a></li></ul></p><p><b>URL</b>: <a href="http://odps.sourceforge.net/odp/owl/Good_Practice_ODP/Normalisation.owl">http://www.gong.manchester.ac.uk/odp/owl/Good_Practice_ODP/Normalisation.owl</a></p><hr><b>Extension ODPs (by-pass the limitations of OWL):</b> <a href="Nary_DataType_Relationship.html">Nary_DataType_Relationship</a>, <a href="Exception.html">Exception</a>, <a href="Nary_Relationship.html">Nary_Relationship</a>.<br/><b>Good Practice ODPs (obtain a more robust, cleaner and easier to maintain ontology):</b> <a href="Entity_Feature_Value.html">Entity_Feature_Value</a>, <a href="Selector.html">Selector</a>, <a href="Normalisation.html">Normalisation</a>, <a href="Upper_Level_Ontology.html">Upper_Level_Ontology</a>, <a href="Closure.html">Closure</a>, <a href="Entity_Quality.html">Entity_Quality</a>, <a href="Value_Partition.html">Value_Partition</a>, <a href="Entity_Property_Quality.html">Entity_Property_Quality</a>, <a href="DefinedClass_Description.html">DefinedClass_Description</a>.<br/><b>Domain Modelling ODPs (solutions for concrete modelling problems in biology):</b> <a href="Interactor_Role_Interaction.html">Interactor_Role_Interaction</a>, <a href="Sequence.html">Sequence</a>, <a href="CompositePropertyChain.html">CompositePropertyChain</a>, <a href="List.html">List</a>, <a href="Adapted_SEP.html">Adapted_SEP</a>.<hr><a href="index.html">ODPs public catalog</a><hr></body></html>
